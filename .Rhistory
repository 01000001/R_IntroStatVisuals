nrow(subset(med, AF ==1))
nrow(subset(med, cluster ==1))
nrow(subset(med, cluster ==1:10))
nrow(subset(med, cluster ==1))
med$total_n_same_cluster <- nrow(subset(med, cluster ==1))
head(med$total_n_same_cluster)
med$total_n_same_cluster <- nrow(subset(med, cluster))
med$total_n_same_cluster <- nrow(subset(med, med$cluster))
nrow(subset(med, cluster==[i]))
for (i in 1:10){
nrow(subset(med, cluster==[i]))
}
for (i in 1:10){
nrow(subset(med, cluster==[i]))
}
for (i in 1:10){
nrow(subset(med, cluster==[i]))
}
for (i in 1:10){nrow(subset(med, cluster==[i]))}
for (i in 1:10){nrow(subset(med, cluster==i))}
nrow(subset(med, cluster==1))
nrow(subset(med, cluster==2))
nrow(subset(med, cluster==3))
med$total_n_same_cluster <- nrow(subset(med, cluster == med$cluster))
View(med)
nrow(subset(med, cluster==3))
nrow(subset(med, cluster == med$cluster))
nrow(subset(med, cluster == i for 1:10))
med$total_n_same_cluster[1]
med$total_n_same_cluster[2]
for (i in 1 :nrow(med)){med$total_n_same_cluster[i] <- nrow(subset(med, cluster == i))}
med$total_n_same_cluster[2]
med$total_n_same_cluster[1]
med$total_n_same_cluster[23]
med$total_n_same_cluster[26]
med$total_n_same_cluster[24]
View(med)
nrow(med)
for (i in 1 : 926){med$total_n_same_cluster[i] <- nrow(subset(med, cluster == i))}
for (i in :nrow(med)){med$total_n_same_cluster[i] <- nrow(subset(med, cluster == med$cluster[i]))}
for (i in 1:nrow(med)){med$total_n_same_cluster[i] <- nrow(subset(med, cluster == med$cluster[i]))}
View(med)
mean(med$total_n_same_cluster)
tapply(nrow(med), med$total_n_same_cluster, mean )
tapply(med$total_n_same_cluster, med$total_n_same_cluster, mean )
tapply(med$total_n_same_cluster, med$high_chads, mean )
subset(med, cluster == 1 & A10BA02==TRUE)
subset(med, cluster == 1 & A10BA02==TRUE)
nrow(subset(med, cluster == 1 & A10BA02==TRUE))
mean(dmed$A10BA02==TRUE)
mean(med$sex=="M")
mean(med$sex=="F")
mean(med$sex=="V")
tapply(med$age, med$AF, mean)
tapply(med$age, med$sex, mean)
tapply(med$age, med$high_chads, mean)
tapply(nrow(subset(med, cluster == 1 & A10BA02==TRUE)), med$high_chads, mean)
nrow(subset(med, cluster == 1 & A10BA02==TRUE))
tapply(15, med$high_chads, mean)
tapply(subset(med, cluster == 1 & A10BA02==TRUE), med$high_chads, mean)
subset(med, cluster == 1 & A10BA02==TRUE)
mean(subset(med, cluster == 1 & A10BA02==TRUE))
subset(med, cluster == 1 & A10BA02==TRUE)
nrow(subset(med, cluster == 1 & A10BA02==TRUE))
subset(med, cluster == 1 & A10BA02==TRUE & high_chads == TRUE)/subset(med, cluster == 1 & A10BA02==TRUE)
subset(med, cluster == 1 & A10BA02==TRUE & high_chads == TRUE)
nrow(subset(med, cluster == 1 & A10BA02==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == 1 & A10BA02==TRUE))
nrow(subset(med, cluster == 1 & A10BA02==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == 1 & A10BA02==TRUE))
med[,8:20]
head(med[,8:20])
head(med[,6:20])
head(med[,8:28])
head(med[,8:27])
head(med$D02AX[,8:27])
head(med[,8:27]$D02AX)
nrow(subset(med, cluster == 1 & A10BA02==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == 1 & A10BA02==TRUE))
nrow(subset(med, cluster == 1 & A10BA02==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == 1 & A10BA02==TRUE))
nrow(subset(med, cluster == 1 & med==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == 1 & A10BA02==TRUE))
head(med[,8:27])
head(med[,8:27][1])
nrow(subset(med, cluster == 1 & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == 1 & A10BA02==TRUE))
nrow(subset(med, cluster == 1 & med[,8:27][1]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == 1 & A10BA02==TRUE))
for (i in 1:10){nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE))}
print(10)
for (i in 1:10){print(nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))}
print("dsds" 1)
print("dsds" + 1)
print("dsds", 1)
print("dsds", 1, "sda")
print("dsds: ")
cat(sprintf("\"%f\" \"%f\"\n", 12, 123))
for (i in 1:10){
print(nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: \"%f", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: \"%f", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: \"%f\n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: \%f\n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: \%f\n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: \"%f\n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: \"%f"\n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: \"%f""\n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: %f \n, nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
,
}
""
''
exit
for (i in 1:10){
cat(( sprintf( "Percentage of patients: %f \n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: %f \n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: %f% \n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: %f\% \n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients: %f \n", nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients in cluster %f: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients in cluster %n: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "Percentage of patients in cluster %i: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med []: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med []: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][3]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
}
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med []: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))}}
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med []: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))}}
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %s: %f \n", "NANANA", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med []: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))}}
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %s: %f \n", i, "NANANA", nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med []: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))}}
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %s: %f \n", i, med[,8:27][m], nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med []: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))}}
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %i: %f \n", i,m, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med []: %f \n", i, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))}}
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %i: %f \n", i,m, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med %i: %f \n", i, m, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))}}
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %i: %f \n", i,m, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %i: %f \n", i,m, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med %i: %f \n", i, m, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & A10BA02==TRUE)))))
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %i: %f \n", i,m, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & med[,8:27][m]==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med %i: %f \n", i, m, nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & med[,8:27][m]==TRUE)))))}}
for (i in 1:20){print(med[,8:27][i])}
for (i in 1:20){print(head(med[,8:27][i]))}
for (i in 1:20){print(med[,8:27][,i])}
for (i in 1:20){print(med[,8:27][i,])}
for (i in 1:20){print(head(med[,8:27][i,]))}
med[,8:27]
head(med[,8:27])
head(med[,8:27][,1])
head(med[,8:27][1,])
med[1,]
med[1,1]
med[0,1]
row.names(med)
column.names(med)
row.names(med)[1]
row.names(med)[2]
row.names(med)[,2]
row.names(med)[2,]
summary(med)
colnames(med)
colnames(med)[20]
colnames(med[,8:27])[20]
colnames(med[,8:27])[1]
class(colnames(med[,8:27])[1])
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %s: %f \n", i,colnames(med[,8:27])[m], nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & med[,8:27][m]==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med %s: %f \n", i, colnames(med[,8:27])[m], nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & med[,8:27][m]==TRUE)))))}}
.libPaths('H:/Rlibs')
library(car)
plot(med$age[med$cluster==2], med$chads[med$cluster==2], col=ifelse(med$chads[med$cluster==2]>=2,"brown2","aquamarine2"), )
niceplot = function(db, clnr){
plot(db$age[db$cluster==clnr], db$chads[db$cluster==clnr], col=ifelse(db$chads[db$cluster==clnr]>=2,"brown2","aquamarine2"), main = paste("Scatterplot of age and CHADS2-score in cluster", clnr, sep = " "), xlab = "Age", ylab = "CHADS-score")}
plot(med$age[med$cluster==2], med$chads[med$cluster==2], col=ifelse(med$chads[med$cluster==2]>=2,"brown2","aquamarine2"), )
for (i in 1:10){
niceplot(med, i)
}
saddPercent <- function(x){
percent <- round(x * 100, digits = 1)
result <- paste(percent, "%", sep = "")
return(result)
}
fit <- lm(some ~ model)
png(filename="your/file/location/name.png")
dev.off()
png(filename="png.png")
dev.off()
png(filename="png.png")
niceplot(med, 2)
dev.off()
dev.copy(jpeg,filename="plot.jpg");
dev.off()
png(filename="png.png")
dev.off()
med <- read.csv("mergemed.csv", header=T, sep=",")
afmed2 <- subset (med, med$cluster== 2, select = c("pid", "M01AB05","A10BA02","C07AB02","M01AE01","N02BE01","N02BE51","C03AA03","B01AC08","N05BA04","C09AA03"))
afmed3 <- subset (med, med$cluster== 3, select = c("pid", "M01AB05","A10BA02","C07AB02","M01AE01","N02BE01","N02BE51","C03AA03","B01AC08","N05BA04","C09AA03"))
#matrix for medication related with AF for cluster 2 and 3
afmed2.d <- dist(afmed2)
afmed3.d <- dist(afmed3)
#euclidean distances
afmed2.d.mt <- as.matrix (afmed2.d)
afmed3.d.mt <- as.matrix (afmed3.d)
#coerce to a normal matrix
#same for non AF medications
nafmed2 <- subset (med, med$cluster== 2, select = c("pid", "C10AA01","A02BC01","R05DA04","J01CA04","S01XA20","D02AX","D07AB09","J01AA02","D07AA02","J01CR02"))
nafmed3 <- subset (med, med$cluster== 3, select = c("pid", "C10AA01","A02BC01","R05DA04","J01CA04","S01XA20","D02AX","D07AB09","J01AA02","D07AA02","J01CR02"))
#matrix for medication related with AF for cluster 2 and 3
nafmed2.d <- dist(nafmed2)
nafmed3.d <- dist(nafmed3)
#euclidean distances
nafmed2.d <- dist(nafmed2)
nafmed3.d <- dist(nafmed3)
#euclidean distances
nafmed2.d.mt <- as.matrix (nafmed2.d)
nafmed3.d.mt <- as.matrix (nafmed3.d)
#coerce to a normal matrix
summed2.d.mt <- afmed2.d.mt + nafmed2.d.mt
med$high_chads <- med$chads > 1
##get the total number of patients in particular clusters and append it to dataframe
for (i in 1:nrow(med)){med$total_n_same_cluster[i] <- nrow(subset(med, cluster == med$cluster[i]))}
#all people in cluster 1 using medication A
nrow(subset(med, cluster == 1 & A10BA02==TRUE))
nrow(subset(med, cluster == 1 & A10BA02==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == 1 & A10BA02==TRUE))
for (i in 1:10){
for (m in 1:20){
cat(( sprintf( "n with chads > 1 / n in cluster %i using med %s: %f \n", i,colnames(med[,8:27])[m], nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == TRUE))/nrow(subset(med, cluster == i & med[,8:27][m]==TRUE)))))
cat(( sprintf( "n with chads < 2 / n in cluster %i using med %s: %f \n", i, colnames(med[,8:27])[m], nrow(subset(med, cluster == i & med[,8:27][m]==TRUE & high_chads == FALSE))/nrow(subset(med, cluster == i & med[,8:27][m]==TRUE)))))}}
View(med)
write.csv(file=med)
write.csv(file=med, x=Fail)
?write.csv
write.csv(med, file = "big_merge.csv")
a <- j
a <- 88
a:g
a <- 99
c <- 88
who()
?who
??who
install.packages("lsr")
who()
library(rsl)
library(lsr)
who()
library(rsl)
load( "aflsmall.Rdata" )
load( "aflsmall.Rdata" )
who()
afl.margins
sum( afl.margins[1:5] )
mean(sum( afl.margins[1:5] ))
mean(afl.margins[1:5])
sort(afl.margins)
median(afl.margins)
?afl
summary(afl)
afl
afl.finalists
summary(afl.finalists)
summary(afl.margins)
library(lsr)
library(lsr)
library( psych )
setwd("~/Documents/R/")
load( "aflsmall.Rdata" )
summary( object = afl.margins )
summary( object = afl.finalists )
load( "clinicaltrial.Rdata" )
who()
who(TRUE)
summary( clin.trial )
describe( x = clin.trial )
describe( clin.trial )
plot(clin.trial$drug)
plot(clin.trial$drug,clin.trial$mood.gain)
describeBy( x=clin.trial, group=clin.trial$therapy )
head(clin.trial)
View(clin.trial)
View(clin.trial)
aggregate( formula = mood.gain ~ drug + therapy,  # mood.gain by drug/therapy combination)
)
aggregate( formula = mood.gail ~ drug + therapy, data  clin.trial, FUN = mean)
aggregate( formula = mood.gail ` drug + therapy, data  clin.trial, FUN = mean)
)
)
q
`
aggregate( formula = mood.gail ~ drug + therapy, data  clin.trial, FUN = mean)
aggregate( formula = mood.gail ~ drug + therapy, data = clin.trial, FUN = mean)
aggregate( formula = mood.gain ~ drug + therapy, data = clin.trial, FUN = mean)
library(lsr)
library( psych )
setwd("~/Documents/R/")
#load( "aflsmall.Rdata" )
load( "parenthood.Rdata" )
#load( "clinicaltrial.Rdata" )
#aggregate( formula = mood.gain ~ drug + therapy, data = clin.trial, FUN = mean)
#page 134
who(TRUE)
describe(parenthood)
summary(parenthood)
plot(parenthood$dan.sleep)
cor( x = parenthood$dan.sleep, y = parenthood$dan.grump )
cor( x = parenthood )
?cor
symnum(cor(longley))
plot(parenthood$dan.sleep,parenthood$dan.grump)
cor(parenthood$dan.sleep,parenthood$dan.grump)
load( "effort.Rdata" )
cor( effort$hours, effort$grade)
cor( effort$hours, effort$grade, method = "spearman")
load("work.Rdata")
head(work)
cor(work$hours,work$pay)
plot(work$hours,work$pay)
correlate(work)
partial <- c(10, 20, NA, 30)
mean(partial)
Fibonacci <- c( 1,1,2,3,5,8,13 )
plot( Fibonacci )
?plot.default
cars
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue")
?plot.default
?args()
?plot()
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = 1)
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "1")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "l")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "p")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "o")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "b")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "h")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "s")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "v")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "S")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "c")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "n")
plot(cars$speed, cars$dist, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue", type = "c")
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers",)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1.2)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1.9)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50")
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o")
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue")
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 3)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 8)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 2)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 3)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 11)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 12)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 19)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 25)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 19)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 19, lty = "dotted")
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted")
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted", ylim = c(0, 100))
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted", ylim = c(0, 10))
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted", axes = FALSE)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted")
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted", frame.plot = TRUE)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted", frame.plot = TRUE, axes = FALSE)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted", frame.plot = FALSE, axes = TRUE)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted", frame.plot = TRUE, axes = TRUE)
plot(x = Fibonacci, main = "The first 7 Fibonacci numbers", xlab = "Position in the sequence", ylab = "The Fibonacci number", font.main = 1, cex.main = 1, font.axis = 2, col.lab = "gray50", type = "o", col = "blue", pch = 20, lty = "dotted", frame.plot = FALSE, axes = TRUE)
Fibonacci <- c( 1,1,2,3,5,8,13 )
1 % 0.5
1 / 0.5
1/0.25
1/0.125
load( "aflsmall.Rdata" )
hist(afl.margins)
hist(afl.finalists)
?diana
library(cluster)
?diana
dmed <- read.csv("Dmed.csv", header=T, sep=",")
dmed <- read.csv("R_clusterAtrialFibrillation/Dmed.csv", header=T, sep=",")
length(dmed)
count.fields(dmed)
nrow(dmed)
head(dmed)
View(dmed)
dmed[:2]
head(dmed)
dmed(:20)
dmed(1:3)
dmed[1:3]
dmed[,1:3]
dmed[1:3,]
try <- dmed[1:5,]
try
try[6:]
try[6:20]
try[6:21]
try[6:29]
try[6:24]
try[6:25]
try[6:26]
try[6:25]
try[5:25]
try[6:25]
sapply(try[6:25],is.logical)
boolCols <- sapply(try[6:25],is.logical)
try$e <- rowSums(try[6:25][,boolCols]) == sum(boolCols)
try$e
boolCols <- sapply(dmed[6:25],is.logical)
dmed$e <- rowSums(dmed[6:25][,boolCols]) == sum(boolCols)
dmed$e
View(dmed)
library(cluster)
library(stats)
library(rms)
library(MASS)
library(FSelector)
dmed <- read.csv("Dmed.csv", header=T, sep=",")
dmed <- read.csv("Dmed.csv", header=T, sep=",")
dmed <- read.csv("R_clusterAtrialFibrillation/Dmed.csv", header=T, sep=",")
dmedAF <- subset(dmed, AF==1) #take only the AF patients
dmed <- read.csv("R_clusterAtrialFibrillation/Dmed.csv", header=T, sep=",")
dmedAF[,6:20]
head(dmedAF[,6:20])
load( "parenthood.Rdata" )
library(lsr)
library( psych )
setwd("~/Documents/R/Intro_stat/")
load( "parenthood.Rdata" )
library(car)
scatterplot( dan.grump ~ dan.sleep, data= parenthood, smooth= FALSE)
airs( formula = ~ dan.sleep + baby.sleep + dan.grump, data = parenthood)
pairs( formula = ~ dan.sleep + baby.sleep + dan.grump, data = parenthood)
pairs( x = parenthood )
freq <- tabulate( afl.finalists )
load( "aflsmall.Rdata" )
freq <- tabulate( afl.finalists )
teams <- levels( afl.finalists )
?levels
barplot( height = freq )
barplot( freq )
barplot( height = freq, names.arg = teams )
barplot( height = freq, names.arg = teams, las = 2 )
barplot( height = freq, names.arg = teams )
par( mar = c( 10.1, 4.1, 4.1, 2.1) )
barplot( height = freq, names.arg = teams, las = 2, ylab = "N of Finalist", main = "Finals Played, 1987-2010", density = 10, angle = 20 )
par( mar = c(5.1, 4.1, 4.1, 2.1) )
barplot( height = freq, names.arg = teams, las = 2, ylab = "N of Finalist", main = "Finals Played, 1987-2010", density = 10, angle = 20 )
